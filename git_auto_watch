#!/bin/bash

# Configuration
VERSION="1.0.0"
LOG_FILE="/tmp/git_auto_watch.log"
PID_FILE="/tmp/git_auto_watch.pid"
BRANCH="main"  # Change this if needed

# Function to display help
show_help() {
    echo "Usage: $0 /path/to/your/repo [OPTIONS]"
    echo "Automatically monitor a Git repository and push changes."
    echo
    echo "Options:"
    echo "  -d, --detach                            Run in detached mode (background)"
    echo "  -m, --message <message>                 Custom commit message"
    echo "  -i, -k, --identity, --key <key>         Specify SSH key for authentication"
    echo "  -l, --logs                              Show live logs (only in detached mode)"
    echo "  -s, --stop                              Stop detached process"
    echo "  --log-file <path>                       Custom log file path (default: $LOG_FILE)"
    echo "  -h, --help                              Show this help"
    echo
    echo "Examples:"
    echo "  $0 ~/my-repo -d -i ~/.ssh/github_key"
    echo "  $0 --logs                  # View live logs"
    echo "  $0 --stop                  # Stop detached process"
    exit 0
}

# Log Management
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

show_logs() {
    if [ ! -f "$LOG_FILE" ]; then
        echo "No log file found at $LOG_FILE"
        exit 1
    fi
    tail -f "$LOG_FILE"
}

# Process Control -- Needs fixing
stop_detached() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        kill "$PID" && rm "$PID_FILE"
        echo "Stopped process $PID"
    else
        echo "No running process found"
        exit 1
    fi
}

# Function to run in detached mode
run_detached() {
    log "Starting in detached mode..."
    (
        # Preserve critical environment variables
        export SSH_AUTH_SOCK SSH_AGENT_PID
        
        # Redirect all output to log file
        exec >"$LOG_FILE" 2>&1
        
        # Store PID and monitor
        echo $$ > "$PID_FILE"
        monitor_and_push "$REPO_DIR" "$COMMIT_MESSAGE"
    ) &
    disown
    echo "Detached process started (PID: $!, Log: $LOG_FILE)"
}

# Function to check if fswatch is installed
check_fswatch() {
    if ! command -v fswatch &> /dev/null; then
        echo "fswatch is not installed. Installing now..."
        
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            sudo apt-get update && sudo apt-get install -y fswatch
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            brew install fswatch
        else
            echo "Unsupported OS. Please install fswatch manually."
            exit 1
        fi
    fi
}

# Function to setup SSH agent and keys
setup_ssh_agent() {
    if [ -n "$SSH_KEY_PATH" ]; then
        # Verify SSH key exists
        if [ ! -f "$SSH_KEY_PATH" ]; then
            echo "Error: SSH key not found at $SSH_KEY_PATH"
            exit 1
        fi

        # Add key to SSH agent if not already added
        if ! ssh-add -l | grep -q "$(ssh-keygen -lf "$SSH_KEY_PATH" | awk '{print $2}')"; then
            echo "Adding SSH key to agent: $SSH_KEY_PATH"
            ssh-add "$SSH_KEY_PATH"  # User enters passphrase once here
        fi
    else
        # Ensure SSH agent is running and has at least one key
        if [ -z "$SSH_AUTH_SOCK" ]; then
            echo "Error: SSH agent not running. Start it with: eval \$(ssh-agent)"
            exit 1
        fi
        if ! ssh-add -l > /dev/null 2>&1; then
            echo "Error: No keys in SSH agent. Add one with: ssh-add ~/.ssh/your_key"
            exit 1
        fi
    fi
}
# Function to check if there are actual changes
has_changes() {
    git status --porcelain | grep -q .
}

# Function to monitor and push changes
monitor_and_push() {
    local repo_dir="$1"
    local commit_message="$2"

    log "Starting monitoring: $repo_dir"
    # echo "Monitoring repository: $repo_dir"
    cd "$repo_dir" || { log "Failed to navigate to $repo_dir"; exit 1; }

    fswatch -o "$repo_dir" |
    while read -r
    do
        # Check if there are actual changes
        if has_changes; then
            # Add all changes
            git add .

            # Use custom commit message or timestamp
            if [ -z "$commit_message" ]; then
                commit_message="Auto-commit on $(date +'%Y-%m-%d %H:%M:%S')"
            fi

            git commit -m "$commit_message"

            # Push changes with SSH configuration
            git push origin "$BRANCH"
            log "Changes detected and pushed: $commit_message"
        else
            log "No changes detected. Skipping commit."
        fi
    done
}

# Parse arguments
parse_arguments() {
    REPO_DIR=""
    DETACHED_MODE=false
    COMMIT_MESSAGE=""
    SSH_KEY_PATH=""

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -d|--detach)
                DETACHED_MODE=true
                shift
                ;;
            -m|--message)
                COMMIT_MESSAGE="$2"
                shift 2
                ;;
            -k|--key|-i|--identity)
                SSH_KEY_PATH="$2"
                shift 2
                ;;
            -l|--logs)
                show_logs
                exit 0
                ;;
            -s|--stop)
                stop_detached
                exit 0
                ;;
            --log-file)
                LOG_FILE="$2"
                shift 2
                ;;
            -v|--version)
                echo "git_auto_watch v$VERSION"
                exit 0
                ;;
            -h|--help)
                show_help
                ;;
            *)
                REPO_DIR="$1"
                shift
                ;;
        esac
    done
}


# ----------------------------
# Main Execution
# ----------------------------
main() {
    parse_arguments "$@"
    
    # Special case for log/stop commands
    if [ -z "$REPO_DIR" ] && [ "$DETACHED_MODE" = false ]; then
        show_help
    fi

    # Validate repository path
    if [ -z "$REPO_DIR" ]; then
        echo "Error: Repository path is required."
        show_help
    fi

    # Check if directory is a Git repository
    if ! git -C "$REPO_DIR" rev-parse --git-dir >/dev/null 2>&1; then
        log "Error: $REPO_DIR is not a Git repository"
        exit 1
    fi

    check_fswatch
    setup_ssh_agent

    if [ "$DETACHED_MODE" = true ]; then
        run_detached
    else
        monitor_and_push "$REPO_DIR" "$COMMIT_MESSAGE"
    fi

}

main "$@"
